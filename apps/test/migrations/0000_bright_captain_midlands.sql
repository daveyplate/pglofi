-- CREATE TABLE "accounts" (
-- 	"id" text PRIMARY KEY NOT NULL,
-- 	"account_id" text NOT NULL,
-- 	"provider_id" text NOT NULL,
-- 	"user_id" text NOT NULL,
-- 	"access_token" text,
-- 	"refresh_token" text,
-- 	"id_token" text,
-- 	"access_token_expires_at" timestamp,
-- 	"refresh_token_expires_at" timestamp,
-- 	"scope" text,
-- 	"password" text,
-- 	"created_at" timestamp DEFAULT now() NOT NULL,
-- 	"updated_at" timestamp NOT NULL
-- );
-- --> statement-breakpoint
-- ALTER TABLE "accounts" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
-- CREATE TABLE "jwkss" (
-- 	"id" text PRIMARY KEY NOT NULL,
-- 	"public_key" text NOT NULL,
-- 	"private_key" text NOT NULL,
-- 	"created_at" timestamp NOT NULL
-- );
-- --> statement-breakpoint
-- ALTER TABLE "jwkss" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
-- CREATE TABLE "sessions" (
-- 	"id" text PRIMARY KEY NOT NULL,
-- 	"expires_at" timestamp NOT NULL,
-- 	"token" text NOT NULL,
-- 	"created_at" timestamp DEFAULT now() NOT NULL,
-- 	"updated_at" timestamp NOT NULL,
-- 	"ip_address" text,
-- 	"user_agent" text,
-- 	"user_id" text NOT NULL,
-- 	CONSTRAINT "sessions_token_unique" UNIQUE("token")
-- );
-- --> statement-breakpoint
-- ALTER TABLE "sessions" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
-- CREATE TABLE "todos" (
-- 	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "todos_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
-- 	"user_id" text DEFAULT (auth.user_id()) NOT NULL,
-- 	"task" text NOT NULL,
-- 	"is_complete" boolean DEFAULT false NOT NULL,
-- 	"inserted_at" timestamp with time zone DEFAULT now() NOT NULL
-- );
-- --> statement-breakpoint
-- ALTER TABLE "todos" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
-- CREATE TABLE "users" (
-- 	"id" text PRIMARY KEY NOT NULL,
-- 	"name" text NOT NULL,
-- 	"email" text NOT NULL,
-- 	"email_verified" boolean DEFAULT false NOT NULL,
-- 	"image" text,
-- 	"created_at" timestamp DEFAULT now() NOT NULL,
-- 	"updated_at" timestamp DEFAULT now() NOT NULL,
-- 	CONSTRAINT "users_email_unique" UNIQUE("email")
-- );
-- --> statement-breakpoint
-- ALTER TABLE "users" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
-- CREATE TABLE "verifications" (
-- 	"id" text PRIMARY KEY NOT NULL,
-- 	"identifier" text NOT NULL,
-- 	"value" text NOT NULL,
-- 	"expires_at" timestamp NOT NULL,
-- 	"created_at" timestamp DEFAULT now() NOT NULL,
-- 	"updated_at" timestamp DEFAULT now() NOT NULL
-- );
-- --> statement-breakpoint
-- ALTER TABLE "verifications" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
-- ALTER TABLE "accounts" ADD CONSTRAINT "accounts_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
-- ALTER TABLE "sessions" ADD CONSTRAINT "sessions_user_id_users_id_fk" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
-- CREATE POLICY "crud-authenticated-policy-select" ON "todos" AS PERMISSIVE FOR SELECT TO "authenticated" USING (true);--> statement-breakpoint
-- CREATE POLICY "crud-authenticated-policy-insert" ON "todos" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK ((select auth.user_id() = "todos"."user_id"));--> statement-breakpoint
-- CREATE POLICY "crud-authenticated-policy-update" ON "todos" AS PERMISSIVE FOR UPDATE TO "authenticated" USING ((select auth.user_id() = "todos"."user_id")) WITH CHECK ((select auth.user_id() = "todos"."user_id"));--> statement-breakpoint
-- CREATE POLICY "crud-authenticated-policy-delete" ON "todos" AS PERMISSIVE FOR DELETE TO "authenticated" USING ((select auth.user_id() = "todos"."user_id"));